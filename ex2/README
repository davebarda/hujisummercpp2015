=============================
Implementation decisions
=============================
I have made a program contains 3 modules and the main.

1)Parsing module - Parser.h Parser.cpp
A module that is repsonible to parse the file and return the relevant data to the main.
The reason I have decided to create the parsing module as a seperate module is because In case there
are changes in the files structure no search will be needed to find where there are specific
assumptions that need to be changed. I also decided that the parsing function will fill given
structures because I wanted to fill some data structures and to keep the return value clear(without
using pair of pairs) I chose to do it that way.

2)Scoring module - Scorer.cpp Scorer.h
A module that is responsible to the scoring method, it is the only module that knows how to give the
score to a song by a query using a "private" calculation method. I added enum define the parameters
that are accepted scoring parameters and didn't get those(the parameters) by string so i can handle
type errors in the compilation time.
I have also decided to not set the Scorer class as a singleton because I think that 
it is possible that there will be some "scorers" in the future and moving an object from singleton
to a normal class can be a problem.
What helped me to make this decisions are the following stackoverflow posts:
http://stackoverflow.com/questions/4461535/singleton-class-whose-ctor-requires-arguments
http://stackoverflow.com/questions/1020312/are-singletons-really-that-bad

3)Song module - Song.h Song.cpp Instrumental.h Instrumental.cpp Vocal.h Vocal.cpp
A module that represents a song. I have decided to make the Song class as an abstract class so
there wont be an ability to make a song object that is not an instrumental or vocalic.
The song implement the methods which are equivalent to both Vocal and Instrulemtal songs, and the
other method(non equivalent) are defined as pure virtual so the derived class 
will have to implement them in the specific way the only non pure virtual method is the destructor,
as we want that in any case the derived class destructor will be called.
I thought about implementing factory design pattern and I have also decided to not make it.
What helped me to make the decision is the following stackoverflow post:
www.stackoverflow.com/questions/628950/constructors-vs-factory-methods .
